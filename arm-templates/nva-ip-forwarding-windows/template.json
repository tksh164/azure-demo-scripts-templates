{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "existingVNetName": {
            "type": "string",
            "metadata": {
                "description": "The name of vNet that to deploy VNA virtual machine."
            }
        },
        "existingVNetLocation": {
            "type": "string",
            "metadata": {
                "description": "The location of vNet that to deploy VNA virtual machine."
            }
        },
        "existingSubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name of subnet that to deploy VNA virtual machine."
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "vmadmin",
            "metadata": {
                "description": "The admin user name for NVA virtual machine."
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "The admin user password for NVA virtual machine."
            }
        },
        "uniqueSuffixSeed": {
            "type": "string",
            "defaultValue": "[utcNow('yyyyMMddhhmmssfff')]",
            "metadata": {
                "description": "Do not need change this value."
            }
        }
    },
    "variables": {

        // Common

        "uniqueSuffix": "[concat('0', toLower(take(uniqueString(parameters('uniqueSuffixSeed')), 3)))]",
        "prefix": "nva",

        // Virtual network

        "nvaSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('existingVNetName'), parameters('existingSubnetName'))]",

        // Availability set for NVA virtual machine

        "avSetName": "[concat(variables('prefix'), '-as')]",
        
        // NVA virtual machine

        "nvaVm": {
            "vmName": "[concat(variables('prefix'), '-vm1')]",
            "computerName": "[concat(variables('prefix'), 'vm1')]",
            "osDiskName": "[concat(variables('prefix'), '-vm1-osdisk')]",
            "nicName": "[concat(variables('prefix'), '-vm1-nic')]",
            "ipName": "[concat(variables('prefix'), '-vm1-ip')]",
            "domainNameLabel": "[concat(variables('prefix'), '-vm1-', variables('uniqueSuffix'))]",
            "nsgName": "[concat(variables('prefix'), '-vm1-nsg')]"
        },

        // Route table

        "routeTableName": "[concat(variables('prefix'), '-rt')]"
    },
    "resources": [

        // NVA virtual machine

        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2022-03-01",
            "name": "[variables('nvaVm').vmName]",
            "location": "[parameters('existingVNetLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nvaVm').nicName)]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_D2s_v3"
                },
                "storageProfile": {
                    "osDisk": {
                        "name": "[variables('nvaVm').osDiskName]",
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "StandardSSD_LRS"
                        }
                    },
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter-smalldisk",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nvaVm').nicName)]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('nvaVm').computerName]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "enableAutomaticUpdates": true,
                        "provisionVmAgent": true
                    }
                },
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": false
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-11-01",
            "name": "[variables('nvaVm').nicName]",
            "location": "[parameters('existingVNetLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaVm').nsgName)]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('nvaSubnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('nvaVm').ipName)]"
                            }
                        }
                    }
                ],
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaVm').nsgName)]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2020-11-01",
            "name": "[variables('nvaVm').ipName]",
            "location": "[parameters('existingVNetLocation')]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIpAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('nvaVm').domainNameLabel]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-11-01",
            "name": "[variables('nvaVm').nsgName]",
            "location": "[parameters('existingVNetLocation')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowRdpInbound",
                        "properties": {
                            "direction": "Inbound",
                            "priority": 500,
                            "protocol": "TCP",
                            "access": "Allow",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "3389"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(variables('nvaVm').vmName, '/Microsoft.Powershell.DSC')]",
            "location": "[parameters('existingVNetLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('nvaVm').vmName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.80",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "wmfVersion": "latest",
                    "configuration": {
                        "url": "https://github.com/tksh164/azure-demo-scripts-templates/raw/master/arm-templates/dsc-vm-extension/dscvmext.zip",
                        "script": "dscvmext.ps1",
                        "function": "raw-configuration"
                    },
                    "privacy": {
                        "dataCollection": "enable"
                    },
                    "configurationArguments": {
                        "RawConfig": "
                            node localhost
                            {
                                LocalConfigurationManager 
                                {
                                    RebootNodeIfNeeded = $true
                                }

                                # Enable IP forwarding and reboot the OS to apply the IP forwarding registry settings.
                                $regPath = 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters'
                                $regName = 'IPEnableRouter'
                                Script Reboot {
                                    TestScript = {
                                        $regValue = Get-ItemProperty -LiteralPath $using:regPath -Name $using:regName -ErrorAction SilentlyContinue
                                        ($regValue -ne $null) -and ($regValue.IPEnableRouter -eq 1)
                                    }
                                    SetScript  = {
                                        Set-ItemProperty -LiteralPath $using:regPath -Name $using:regName -Value 1 -Force
                                        $global:DSCMachineStatus = 1
                                    }
                                    GetScript  = { @{ Result = 'GetScript reuslt' } }
                                }
                            }
                        "
                    }
                },
                "protectedSettings": {}
            }
        },

        // Availability set for NVA virtual machine

        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2022-03-01",
            "name": "[variables('avSetName')]",
            "location": "[parameters('existingVNetLocation')]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            }
        },

        // Route table

        {
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "2020-11-01",
            "name": "[variables('routeTableName')]",
            "location": "[parameters('existingVNetLocation')]",
            "properties": {
            }
        },
        {
            "type": "Microsoft.Network/routeTables/routes",
            "apiVersion": "2020-11-01",
            "name": "[concat(variables('routeTableName'), '/example')]",
            "location": "[parameters('existingVNetLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', variables('nvaVm').vmName)]"
            ],
            "properties": {
                "addressPrefix": "10.0.0.0/24",
                "nextHopType": "VirtualAppliance",
                "nextHopIpAddress": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nvaVm').nicName)).ipConfigurations[0].properties.privateIPAddress]"
            }
        }
    ],
    "outputs": {
        "nvaVmPrivateIpAddress": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nvaVm').nicName)).ipConfigurations[0].properties.privateIPAddress]"
        }
    }
}
